% 20170711 - This is a new version of ModMapper that largely rebuilds the
% original version. It assumes only the starting protein seqeuence, which
% is user inputed, and then dynamically identifies which modifications are
% present in the data. It then localizes modifications by residue on the
% sequence provided by the user.
% Future Directions - Make a multi-protein/multi-file script wrapper. Note
% that fixed modifications are not tracked in this system - it will in most
% cases ignore TMT labels and propionamide. Add a way to identify the
% protein being searched. Generate an Ouput file.

clear all

% Here we enter the protein sequence to be searched against. 

proteinsequence = 'MAEQVALSRTQVCGILREELFQGDAFHQSDTHIFIIMGASGDLAKKKIYPTIWWLFRDGLLPENTFIVGYARSRLTVADIRKQSEPFFKATPEEKLKLEDFFARNSYVAGQYDDAASYQRLNSHMNALHLGSQANRLFYLALPPTVYEAVTKNIHESCMSQIGWNRIIVEKPFGRDLQSSDRLSNHISSLFREDQIYRIDHYLGKEMVQNLMVLRFANRIFGPIWNRDNIACVILTFKEPFGTEGRGGYFDEFGIIRGPGRQGGSGSESCSLSLGSLVWGPHALEPGEQGGELRRALASSVPRDVMQNHLLQMLCLVAMEKPASTNSDDVRDEKVKVLKCISEVQANNVVLGQYVGNPDGEGEATKGYLDDPTVPRGSTTATFAAVVLYVENERWDGVPFILRCGKALNERKAEVRLQFHDVAGDIFHQQCKRNELVIRVQPNEAVYTKMMTKKPGMFFNPEESELDLTYGNRYKNVKLPDAYERLILDVFCGSQMHFVRSDELREAWRIFTPLLHQIELEKPKPIPYIYGSRGPTEADELMKRVGFQYEGTYKWVNPHKL';
%'MACCHKVMLLLDTAGGAARHSRVRRAALRLLTYLSCRFGLARVHWAFKFFDSQGARSRPSRVSDFRELGSRSWEDFEEELEARLEDRAHLPGPAPRATHTHGALMETLLDYQWDRPEITSPTKPILRSSGRRLLDVESEAKEAEAALGGLVNAVFLLAPCPHSQRELLQFVSGCEAQAQRLPPTPKQVMEKLLPKRVREVMVARKITFYWVDTTEWSKLWESPDHLGYWTVCELLHHGGGTVLPSESFSWDFAQAGEMLLRSGIKLSSEPHLSPWISMLPTDATLNRLLYNSPEYEASFPRMEGMLFLPVEGKEIQETWTVTLEPLAMHQRHFQKPVRIFLKGSVAQWSLPTSSTLGTDSWMLGSPEESTATQRLLFQQLVSRLTAEELHLVADVDPGEGRPPITGVISPLSASAMILTVCRTKEAEFQRHVLQTAVADSPRDTASLFSDVVDSILNQTHDSLADTASAASPVPEWAQQELGHTTPWSPAVVEKWFPFCNISGASSDLMESFGLLQAASANKEESSKTEGELIHCLAELYQRKSREESTIAHQEDSKKKRGVPRTPVRQKMNTMCRSLKMLNVARLNVKAQKLHPDGSPDVAGEKGIQKIPSGRTVDKLEDRGRTLRSSKPKDFKTEEELLSYIRENYQKTVATGEIMLYACARNMISTVKMFLKSKGTKELEVNCLNQVKSSLLKTSKSLRQNLGKKLDKEDKVRECQLQVFLRLEMCLQCPSINESTDDMEQVVEEVTDLLRMVCLTEDSAYLAEFLEEILRLYIDSIPKTLGNLYNSLGFVIPQKLAGVLPTDFFSDDSMTQENKSPLLSVPFLSSARRSVSGSPESDELQELRTRSAKKRRKNALIRHKSIAEVSQNLRQIEIPKVSKRATKKENSHPAPQQPSQPVKDTVQEVTKVRRNLFNQELLSPSKRSLKRGLPRSHSVSAVDGLEDKLDNFKKNKGYHKLLTKSVAETPVHKQISKRLLHRQIKGRSSDPGPDIGVVEESPEKGDEISLRRSPRIKQLSFSRTHSASFYSVSQPKSRSVQRVHSFQQDKSDQRENSPVQSIRSPKSLLFGAMSEMISPSEKGSARMKKRSRNTLDSEVPAAYQTPKKSHQKSLSFSKTTPRRISHTPQTPLYTPERLQKSPAKMTPTKQAAFKESLKDSSSPGHDSPLDSKITPQKRHTQAGEGTSLETKTPRTPKRQGTQPPGFLPNCTWPHSVNSSPESPSCPAPPTSSTAQPRRECLTPIRDPLRTPPRAAAFMGTPQNQTHQQPHVLRAARAEEPAQKLKDKAIKTPKRPGNSTVTSSPPVTPKKLFTSPLCDVSKKSPFRKSKIECPSPGELDQKEPQMSPSVAASLSCPVPSTPPELSQRATLDTVPPPPPSKVGKRCRKTSDPRRSIVECQPDASATPGVGTADSPAAPTDSRDDQKGLSLSPQSPPERRGYPGPGLRSDWHASSPLLITSDTEHVTLLSEAEHHGIGDLKSNVLSVEEGEGLRTADAEKSSLSHPGIPPSPPSCGPGSPLMPSRDVHCTTDGRQCQASAQLDNLPASAWHSTDSASPQTYEVELEMQASGLPKLRIKKIDPSSSLEAEPLSKEESSLGEESFLPALSMPRASRSLSKPEPTYVSPPCPRLSHSTPGKSRGQTYICQACTPTHGPSSTPSPFQTDGVPWTPSPKHSGKTTPDIIKDWPRRKRAVGCGAGSSSGRGEVGADLPGSLSLLESEGKDHGLELSIHRTPILEDFELEGVCQLPDQSPPRNSMPKAEEASSWGQFGLSSRKRVLLAKEEADRGAKRICDLREDSEVSKSKEGSPSWSAWQLPSTGDEEVFVSGSTPPPSCAVRSCLSASALQALTQSPLLFQGKTPSSQSKDPRDEDVDVLPSTVEDSPFSRAFSRRRPISRTYTRKKLMGTWLEDL';

%'MGSSHHHHHHSSGLVPAGSHMMANNEDKLRDYLKRVTAELQQNTRRLREIEGRTHEPVAIVGMACRLPGGVASPEDLWQLVAGDGDAISEFPQDRGWDVEGLYDPDPDASGRTYCRSGGFLHDAGEFDADFFGISPREALAMDPQQRLSLTTAWEAIESAGIDPTALKGSGLGVFVGGWHTGYTSGQTTAVQSPELEGHLVSGAALGFLSGRIAYVLGTDGPALTVDTACSSSLVALHLAVQALRKGECDMALAGGVTVMPNADLFVQFSRQRGLAADGRSKAFATSADGFGPAEGAGVLLVERLSDARRNGHRILAVVRGSAVNQDGASNGLTAPHGPSQQRVIRRALADARLAPGDVDVVEAHGTGTRLGDPIEAQALIATYGQEKSSEQPLRLGALKSNIGHTQAAAGVAGVIKMVQAMRHGLLPKTLHVDEPSDQIDWSAGTVELLTEAVDWPEKQDGGLRRAAVSSFGISGTNAHVVLEEAPAVEDSPAVEPPAGGGVVPWPVSAKTPAALDAQIGQLAAYADGRTDVDPAVAARALVDSRTAMEHRAVAVGDSREALRDALRMPEGLVRGTSSDVGRVAFVFPGQGTQWAGMGAELLDSSPEFAASMAECETALSRYVDWSLEAVVRQEPGAPTLDRVDVVQPVTFAVMVSLAKVWQHHGITPQAVVGHSQGEIAAAYVAGALTLDDAARVVTLRSKSIAAHLAGKGGMISLALDEAAVLKRLSDFDGLSVAAVNGPTATVVSGDPTQIEELARTCEADGVRARIIPVDYASHSRQVEIIEKELAEVLAGLAPQAPHVPFFSTLEGTWITEPVLDGTYWYRNLRHRVGFAPAVETLAVDGFTHFIEVSAHPVLTMTLPETVTGLGTLRREQGGQERLVTSLAEAWANGLTIDWAPILPTATGHHPELPTYAFQTERFWLQSSAPTSAADDWRYRVEWKPLTASGQADLSGRWIVAVGSEPEAELLGALKAAGAEVDVLEAGADDDREALAARLTALTTGDGFTGVVSLLDDLVPQVAWVQALGDAGIKAPLWSVTQGAVSVGRLDTPADPDRAMLWGLGRVVALEHPERWAGLVDLPAQPDAAALAHLVTALSGATGEDQIAIRTTGLHARRLARAPLHGRRPTRDWQPHGTVLITGGTGALGSHAARWMAHHGAEHLLLVSRSGEQAPGATQLTAELTASGARVTIAACDVADPHAMRTLLDAIPAETPLTAVVHTAGAPGGDPLDVTGPEDIARILGAKTSGAEVLDDLLRGTPLDAFVLYSSNAGVWGSGSQGVYAAANAHLDALAARRRARGETATSVAWGLWAGDGMGRGADDAYWQRRGIRPMSPDRALDELAKALSHDETFVAVADVDWERFAPAFTVSRPSLLLDGVPEARQALAAPVGAPAPGDAAVAPTGQSSALAAITALPEPERRPALLTLVRTHAAAVLGHSSPDRVAPGRAFTELGFDSLTAVQLRNQLSTVVGNRLPATTVFDHPTPAALAAHLHEAYLAPAEPAPTDWEGRVRRALAELPLDRLRDAGVLDTVLRLTGIEPEPGSGGSDGGAADPGAEPEASIDDLDAEALIRMALGPRNT';

%'MTAVHAGNINFKWDPKSLEIRTLAVERLLEPLVTQVTTLVNTNSKGPSNKKRGRSKKAHVLAASVEQATENFLEKGDKIAKESQFLKEELVVAVEDVRKQGDLMKSAAGEFADDPCSSVKRGNMVRAARALLSAVTRLLILADMADVYKLLVQLKVVEDGILKLRNAGNEQDLGIQYKALKPEVDKLNIMAAKRQQELKDVGNRDQMAAARGILQKNVPILYTASQACLQHPDVAAYKANRDLIYKQLQQAVTGISNAAQATASDDAAQHQGGSGGELAYALNNFDKQIIVDPLSFSEERFRPSLEERLESIISGAALMADSSCTRDDRRERIVAECNAVRQALQDLLSEYMGNAGRKERSDALNSAIDKMTKKTRDLRRQLRKAVMDHVSDSFLETNVPLLVLIEAAKNGNEKEVKEYAQVFREHANKLIEVANLACSISNNEEGVKLVRMSASQLEALCPQVINAALALAAKPQSKLAQENMDLFKEQWEKQVRVLTDAVDDITSIDDFLAVSENHILEDVNKCVIALQEKDVDGLDRTAGAIRGRAARVIHVVTSEMDNYEPGVYTEKVLEATKLLSNTVMPRFTEQVEAAVEALSSDPAQPMDENEFIDASRLVYDGIRDIRKAVLMIRTPEELDDSDFETEDFDVRSRTSVQTEDDQLIAGQSARAIMAQLPQEQKAKIAEQVASFQEEKSKLDAEVSKWDDSGNDIIVLAKQMCMIMMEMTDFTRGKGPLKNTSDVISAAKKIAEAGSRMDKLGRTIADHCPDSACKQDLLAYLQRIALYCHQLNICSKVKAEVQNLGGELVVSGVDSAMSLIQAAKNLMNAVVQTVKASYVASTKYQKSQGMASLNLPAVSWKMKAPEKKPLVKREKQDETQTKIKRASQKKHVNPVQALSEFKAMDSI';

%'MVGVTAFGNFDLASLAIYSFWIFLAGLIYYLQTENMREGYPLENEDGTPAANQGPFPLPKPKTFILPHGRGTLTVPGPESEDRPIALARTAVSEGFPHAPTGDPMKDGVGPASWVARRDLPELDGHGHNKIKPMKAAAGFHVSAGKNPIGLPVRGCDLEIAGKVVDIWVDIPEQMARFLEVELKDGSTRLLPMQMVKVQSNRVHVNALSSDLFAGIPTIKSPTEVTLLEEDKICGYVAGGLMYAAPKRKSVVAAMLAEYVHHHHHH*MALLSFERKYRVPGGTLVGGNLFDFWVGPFYVGFFGVATFFFAALGIILIAWSAVLQGTWNPQLISVYPPALEYGLGGAPLAKGGLWQIITICATGAFVSWALREVEICRKLGIGYHIPFAFAFAILAYLTLVLFRPVMMGAWGYAFPYGIWTHLDWVSNTGYTYGNFHYNPAHMIAISFFFTNALALALHGALVLSAANPEKGKEMRTPDHEDTFFRDLVGYSIGTLGIHRLGLLLSLSAVFFSALCMIITGTIWFDQWVDWWQWWVKLPWWANIPGGING*MAEYQNIFSQVQVRGPADLGMTEDVNLANRSGVGPFSTLLGWFGNAQLGPIYLGSLGVLSLFSGLMWFFTIGIWFWYQAGWNPAVFLRDLFFFSLEPPAPEYGLSFAAPLKEGGLWLIASFFMFVAVWSWWGRTYLRAQALGMGKHTAWAFLSAIWLWMVLGFIRPILMGSWSEAVPYGIFSHLDWTNNFSLVHGNLFYNPFHGLSIAFLYGSALLFAMHGATILAVSRFGGERELEQIADRGTAAERAALFWRWTMGFNATMEGIHRWAIWMAVLVTLTGGIGILLSGTVVDNWYVWGQNHGMAPLN';

%'MELENIVANTVLLKAREGGGGKRKGKSKKWKEILKFPHISQCEDLRRTIDRDYCSLCDKQPIGRLLFRQFCETRPGLECYIQFLDSVAEYEVTPDEKLGEKGKEIMTKYLTPKSPVFIAQVGQDLVSQTEEKLLQKPCKELFSACAQSVHEYLRGEPFHEYLDSMFFDRFLQWKWLERQPVTKNTFRQYRVLGKGGFGEVCACQVRATGKMYACKRLEKKRIKKRKGESMALNEKQILEKVNSQFVVNLAYAYETKDALCLVLTIMNGGDLKFHIYNMGNPGFEEERALFYAAEILCGLEDLHRENTVYRDLKPENILLDDYGHIRISDLGLAVKIPEGDLIRGRVGTVGYMAPEVLNNQRYGLSPDYWGLGCLIYEMIEGQSPFRGRKEKVKREEVDRRVLETEEVYSHKFSEEAKSICKMLLTKDAKQRLGCQEEGAAEVKRHPFFRNMNFKRLEAGMLDPPFVPDPRAVYCKDVLDIEQFSTVKGVNLDHTDDDFYSKFSTGSVSIPWQNEMIETECFKELNVFGPNGTLPPDLNRNHPPEPPKKGLLQRLFKRQHQNNSKSSPSSKTSFNHHINSNHVSSNSTGSS';

%'GGILDSMGRLPPPSPATERSHYTMEFGYSSNSPSTHRSYSYRPYSYRHFAPPTTPCSTDVCDSDYAPSRRMTSVATAKGYTSDLNYDSEPVPPPPTPRSQYLSAEENYESCPPSPYTERSYSHHLYPPPPSPCTDSS';

%'MTAVHAGNINFKWDPKSLEIRTLAVERLLEPLVTQVTTLVNTNSKGPSNKKRGRSKKAHVLAASVEQATENFLEKGDKIAKESQFLKEELVVAVEDVRKQGDLMKSAAGEFADDPCSSVKRGNMVRAARALLSAVTRLLILADMADVYKLLVQLKVVEDGILKLRNAGNEQDLGIQYKALKPEVDKLNIMAAKRQQELKDVGNRDQMAAARGILQKNVPILYTASQACLQHPDVAAYKANRDLIYKQLQQAVTGISNAAQATASDDAAQHQGGSGGELAYALNNFDKQIIVDPLSFSEERFRPSLEERLESIISGAALMADSSCTRDDRRERIVAECNAVRQALQDLLSEYMGNAGRKERSDALNSAIDKMTKKTRDLRRQLRKAVMDHVSDSFLETNVPLLVLIEAAKNGNEKEVKEYAQVFREHANKLIEVANLACSISNNEEGVKLVRMSASQLEALCPQVINAALALAAKPQSKLAQENMDLFKEQWEKQVRVLTDAVDDITSIDDFLAVSENHILEDVNKCVIALQEKDVDGLDRTAGAIRGRAARVIHVVTSEMDNYEPGVYTEKVLEATKLLSNTVMPRFTEQVEAAVEALSSDPAQPMDENEFIDASRLVYDGIRDIRKAVLMIRTPEELDDSDFETEDFDVRSRTSVQTEDDQLIAGQSARAIMAQLPQEQKAKIAEQVASFQEEKSKLDAEVSKWDDSGNDIIVLAKQMCMIMMEMTDFTRGKGPLKNTSDVISAAKKIAEAGSRMDKLGRTIADHCPDSACKQDLLAYLQRIALYCHQLNICSKVKAEVQNLGGELVVSGVDSAMSLIQAAKNLMNAVVQTVKASYVASTKYQKSQGMASLNLPAVSWKMKAPEKKPLVKREKQDETQTKIKRASQKKHVNPVQALSEFKAMDSI';

% This section brings in the peptide file from a Byonic output. Assumes
% that the peptide file contains only peptides for the above protein
% sequence, exported from the Viewer.

testpepfile = uigetfile('.xlsx','Choose Byonic Peptide List Datafile');
[num,testmods,testpeptides] = xlsread(testpepfile);

% Here we put all of the peptides into a master list with their starting
% positions. It also strips out their modification text that is in the
% peptide sequence, along with the leading and following residue info.

for i = 1:length(testpeptides(:,1))-1
    fulllengthpept = testpeptides{i+1,4};
    trimmedpeptide{1,i} = fulllengthpept(3:end-2);
    trimmedpeptide{2,i} = testpeptides{i+1,3}; %This is the start position
    trimmedpeptide{3,i} = regexprep(trimmedpeptide{1,i},'\[.\d*\.\d*\]','');
end;

% This is an index of which peptide have modifications. ModList is
% generated to search through the original variable modifications column.
% Important - Not sure that this interacts well with fixed modifications.
% Will need to address if we want to map them, but we already have the
% fixed mod value (it's the same as total observations). I've also dealt
% with the terminal modification problem for both N and C terminal mods
% here, by replacing 'Term' with 1 (for N terminal mods) or the length of
% the peptide in the case of C Terminal mods (note, I've never tested any
% actual C terminal mods, so it remains to be seen if this works right.

PeptideIndex = [];

ModList = testpeptides(2:end,5);
for i = 1:length(ModList)
    if isnan(ModList{i}) == 0
        PeptideIndex = [PeptideIndex i];
        if strfind(ModList{i},'CTerm') > 0
            CTermReplacement = num2str(length(trimmedpeptide{3,i}));
            ModList{i} = regexprep(ModList{i},'Term', CTermReplacement);
        end;
        if strfind(ModList{i},'NTerm') > 0
            ModList{i} = regexprep(ModList{i},'Term', '1');
        end;
    end;
end;
ModList(cellfun(@(ModList) any(isnan(ModList)),ModList)) = [];

% Here we isolate all of the instances in which multiple modifications are
% observed on a single peptide. I allow for up to ten mods per peptide, 
% which should be more than enough.

TempModList = cell(length(ModList),10);
TempIndexList = cell(length(ModList),1);
for i = 1:length(ModList)
    SplitModList = strsplit(ModList{i},';');
    for j = 1:length(SplitModList)
        TempModList(i,j) = SplitModList(j);
        TempIndexList{i,1} = testpeptides{PeptideIndex(i)+1,3};
    end;
end;

% PassModList puts all of the index info into the same list as the isolated
%  mods - basically I attach the row headers as indices.

PassModList = [TempIndexList, TempModList];

% This is a bit of a sidetrack using the TempModList to identify the 
% overall diversity of mods actually observed in the data. It searches
% through the isolated modifications, dumps residue information, and keeps
% only the mod name and the mass. Then it retains only unique mods, such
% that we preserve a singleton master list.

TempModList(cellfun(@(TempModList) any(isempty(TempModList)),TempModList)) = [];
UniPosModList = unique(TempModList');
UniModList = cell(length(UniPosModList),1);
for i = 1:length(UniPosModList)
    TempModList = strsplit(UniPosModList{i},'(');
    UniModList{i,1} = TempModList{:,2};
end;
UniModList = unique(UniModList);

% As of now, This part isn't used. Might cut it in version 9, but I'll see
% if it turns useful later. For now it breaks apart the string further to
% get the modification name and mass independently. Thought I might use
% this to search based on related masses for wild cards, but will save that
% for later.

MassHandleList = cell(length(UniModList),2);
for i = 1:length(UniModList(:,1))
    tempHandle = strsplit(UniModList{i},' / ');
    MassHandleList{i,1} = tempHandle{:,1};
    if strfind(MassHandleList{i,1},'Trioxidation' 
    tempHandleMass = tempHandle{:,2};
    MassHandleList{i,2} = tempHandleMass(1:end-1);
end;

% Now I'll build the output structure, which is called sequence longform
% initially.

sequencelongform = cell(3+length(UniModList),length(proteinsequence));

for i = 1:length(proteinsequence)
    sequencelongform{1,i} = i; % Number in Sequence
    sequencelongform{2,i} = proteinsequence(i); % Residue
    sequencelongform{3,i} = 0; % Will be Total observations of residue
    for j = 4:length(UniModList)+3 % one row for each modification in UniModList
        sequencelongform{j,i} = 0;
    end;
end;

% Here, I use trimmedpeptide from above to fill in the Total observations
% row. I use the start position and the length of the stripped peptides.

for j = 1:length(trimmedpeptide)
    for k = trimmedpeptide{2,j}:trimmedpeptide{2,j}+length(trimmedpeptide{3,j})-1
        sequencelongform{3,k} = sequencelongform{3,k} + 1;
    end;
end;

% Alot of things happen here to populate sequencelongforms rows for each
% modification. For each modification, and each time it is observed in the
% PassModList where I've split them out individually, it extracts the
% modified residue position, and uses that to populate the sequencelongform
% with the number of observations of that mod.

for i = 1:length(UniModList)
    for j = 2:10
        for k = 1:length(PassModList(:,1))
            if strfind(PassModList{k,j},UniModList{i}) > 0
                TempPosPept = regexp(PassModList{k,j},'.\d*\(','match');
                TempPosPept = TempPosPept{1,1};
                TempPosPept = str2num(TempPosPept(2:end-1));
                TempModPosSeq = PassModList{k,1} - 1 + TempPosPept;
                sequencelongform{3+i,TempModPosSeq} = sequencelongform{3+i,TempModPosSeq} + 1;
            end;
        end;
    end;
end;

%This little bit the adds on the row names so that we can build the output
%table. Need to add in the output table itself, and write it to a file. May
%save this for the wrapper script mentioned at the onset.

PassRowNames = ['Position'; 'Residue'; 'Total'; UniModList];
PassSeqOut = [PassRowNames, sequencelongform];
